{
  "type": "CompiledStateGraph",
  "agents": {
    "Main_Agent": {
      "name": "Main_Agent",
      "capabilities": [
        "weather_services",
        "mathematical_operations"
      ],
      "tools": [
        "ask_user",
        "get_weather"
      ],
      "prompt_info": null,
      "raw_data": {
        "type": "<class 'langgraph.pregel.read.PregelNode'>",
        "attributes": {
          "channels": "['messages', 'active_agent', 'temperature', 'location', 'weather', 'math_expression', 'math_result', 'thread_mode', 'task_type', 'constraints', 'is_last_step', 'remaining_steps']",
          "triggers": "['branch:to:Main_Agent']",
          "mapper": "None",
          "writers": "list: <large_object>",
          "bound": "<langgraph.graph.state.CompiledStateGraph object at 0x1508de420>",
          "cache_policy": "None",
          "retry_policy": "None",
          "tags": "None",
          "metadata": "None",
          "subgraphs": "[<langgraph.graph.state.CompiledStateGraph object at 0x1508de420>]"
        },
        "methods": [
          "ainvoke",
          "astream",
          "copy",
          "invoke",
          "stream"
        ],
        "nested_data": {}
      }
    },
    "Alice": {
      "name": "Alice",
      "capabilities": [
        "weather_services",
        "mathematical_operations"
      ],
      "tools": [
        "ask_user",
        "get_weather"
      ],
      "prompt_info": null,
      "raw_data": {
        "type": "<class 'langgraph.pregel.read.PregelNode'>",
        "attributes": {
          "channels": "['messages', 'active_agent', 'temperature', 'location', 'weather', 'math_expression', 'math_result', 'thread_mode', 'task_type', 'constraints', 'is_last_step', 'remaining_steps']",
          "triggers": "['branch:to:Alice']",
          "mapper": "None",
          "writers": "list: <large_object>",
          "bound": "<langgraph.graph.state.CompiledStateGraph object at 0x1508df920>",
          "cache_policy": "None",
          "retry_policy": "None",
          "tags": "None",
          "metadata": "None",
          "subgraphs": "[<langgraph.graph.state.CompiledStateGraph object at 0x1508df920>]"
        },
        "methods": [
          "ainvoke",
          "astream",
          "copy",
          "invoke",
          "stream"
        ],
        "nested_data": {}
      }
    },
    "Bob": {
      "name": "Bob",
      "capabilities": [
        "weather_services",
        "mathematical_operations"
      ],
      "tools": [
        "ask_user",
        "get_weather"
      ],
      "prompt_info": null,
      "raw_data": {
        "type": "<class 'langgraph.pregel.read.PregelNode'>",
        "attributes": {
          "channels": "['messages', 'active_agent', 'temperature', 'location', 'weather', 'math_expression', 'math_result', 'thread_mode', 'task_type', 'constraints', 'is_last_step', 'remaining_steps']",
          "triggers": "['branch:to:Bob']",
          "mapper": "None",
          "writers": "list: <large_object>",
          "bound": "<langgraph.graph.state.CompiledStateGraph object at 0x1508de1e0>",
          "cache_policy": "None",
          "retry_policy": "None",
          "tags": "None",
          "metadata": "None",
          "subgraphs": "[<langgraph.graph.state.CompiledStateGraph object at 0x1508de1e0>]"
        },
        "methods": [
          "ainvoke",
          "astream",
          "copy",
          "invoke",
          "stream"
        ],
        "nested_data": {}
      }
    }
  },
  "capabilities": [
    "weather_services",
    "mathematical_operations",
    "weather_services",
    "mathematical_operations",
    "weather_services",
    "mathematical_operations"
  ],
  "tools": [
    "ask_user",
    "get_weather",
    "ask_user",
    "get_weather",
    "ask_user",
    "get_weather"
  ],
  "workflow_description": "Multi-agent workflow system with 3 specialized agents: Main_Agent (weather_services, mathematical_operations). Alice (weather_services, mathematical_operations). Bob (weather_services, mathematical_operations). Core system capabilities: weather_services, mathematical_operations",
  "node_count": 4,
  "detailed_agents": {
    "Main_Agent": {
      "name": "Main_Agent",
      "capabilities": [
        "weather_services",
        "mathematical_operations"
      ],
      "tools": [
        "ask_user",
        "get_weather"
      ],
      "prompt_info": null,
      "role_description": "Mathematical computation specialist",
      "interaction_patterns": [
        "Receives initial user requests",
        "Delegates tasks to specialized agents",
        "Coordinates multi-agent workflows",
        "Collaborates with 2 other agents"
      ]
    },
    "Alice": {
      "name": "Alice",
      "capabilities": [
        "weather_services",
        "mathematical_operations"
      ],
      "tools": [
        "ask_user",
        "get_weather"
      ],
      "prompt_info": null,
      "role_description": "Mathematical computation specialist",
      "interaction_patterns": [
        "Collaborates with 2 other agents"
      ]
    },
    "Bob": {
      "name": "Bob",
      "capabilities": [
        "weather_services",
        "mathematical_operations"
      ],
      "tools": [
        "ask_user",
        "get_weather"
      ],
      "prompt_info": null,
      "role_description": "Mathematical computation specialist",
      "interaction_patterns": [
        "Collaborates with 2 other agents"
      ]
    }
  },
  "workflow_insights": {
    "agent_count": 3,
    "total_capabilities": 6,
    "total_tools": 6,
    "workflow_type": "Small multi-agent system",
    "complexity_level": "High complexity",
    "collaboration_pattern": "Hub-and-spoke (coordinator pattern)"
  },
  "complexity_assessment": {
    "agent_complexity": {
      "count": 3,
      "assessment": "Medium"
    },
    "tool_complexity": {
      "count": 6,
      "assessment": "Medium"
    },
    "capability_complexity": {
      "count": 6,
      "assessment": "Low"
    },
    "overall_complexity": "High complexity"
  },
  "testing_recommendations": {
    "unit_tests": [
      "Test Main_Agent individual capabilities",
      "Test Alice individual capabilities",
      "Test Bob individual capabilities",
      "Test ask_user tool functionality",
      "Test get_weather tool functionality",
      "Test ask_user tool functionality",
      "Test get_weather tool functionality",
      "Test ask_user tool functionality",
      "Test get_weather tool functionality"
    ],
    "integration_tests": [
      "Test agent handoff mechanisms",
      "Test multi-agent coordination"
    ],
    "performance_tests": [],
    "edge_cases": [
      "Test with invalid inputs",
      "Test with concurrent requests",
      "Test with agent failures"
    ]
  }
}